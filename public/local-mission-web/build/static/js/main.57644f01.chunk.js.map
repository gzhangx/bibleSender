{"version":3,"sources":["components/api.js","components/Expenses.js","App.js","reportWebVitals.js","index.js"],"names":["getUrl","path","request","require","get","doGetOp","url","send","then","r","doPostOp","data","post","getData","sql","a","Expenses","useState","categories","setCategories","curCategory","setCurCategory","payee","setPayee","amount","setAmount","files","setFiles","doCC","setDoCC","submitting","setSubmitting","useEffect","getCategories","res","length","name","Form","Group","controlId","Label","Check","checked","type","onClick","label","Control","as","placeholder","value","onChange","e","target","Text","className","DropdownButton","title","map","l","ind","Dropdown","Item","onSelect","f","Row","Col","buffer","Button","filter","fl","reader","FileReader","onload","result","concat","readAsDataURL","variant","disabled","emailExpense","categary","attachements","console","log","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57644f01.chunk.js","sourcesContent":["//import { get } from 'superagent';\r\n\r\nconst apiBase = 'http://192.168.1.41:8080';\r\n//const apiBase='http://localhost:8080';\r\nconst getUrl=path => `${apiBase}/localMission/${path}`;\r\nconst request = require('superagent');\r\nconst get = require('lodash/get');\r\n\r\n\r\nfunction doGetOp(url) {\r\n    return request.get(url).send().then(r => get(r, 'body'));\r\n}\r\nfunction doPostOp(url, data) {\r\n    return request.post(url).send(data).then(r => get(r, 'body'));\r\n}\r\n \r\nexport async function getData(sql) {\r\n    return doGetOp(getUrl(sql));\r\n}\r\n\r\nexport async function getCategories() {\r\n    return getData('getCategory');\r\n}\r\n\r\nexport async function emailExpense(data) {\r\n    return doPostOp(getUrl('emailExpense'), data);\r\n}\r\n\r\n/*\r\nmodule.exports = {\r\n    getData,\r\n    getModel,\r\n    sqlGet,\r\n    sqlAdd,\r\n    sqlDelete,\r\n    sqlGetTables,\r\n    sqlGetTableInfo,\r\n    sqlFreeForm,\r\n    sendEmail,\r\n};\r\n*/\r\n","import React, {useState, useEffect} from 'react';\r\nimport { DropdownButton, Dropdown, Form, Button, Row, Col} from 'react-bootstrap';\r\nimport { getCategories, emailExpense } from './api';\r\nexport function Expenses() {\r\n    const [categories, setCategories] = useState([]);\r\n    const [curCategory, setCurCategory] = useState('');\r\n    const [payee, setPayee] = useState('');\r\n    const [amount, setAmount] = useState('');\r\n    const [files, setFiles] = useState([]);\r\n    const [doCC, setDoCC] = useState('');\r\n    const [submitting, setSubmitting] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getCategories().then(res => {\r\n            setCategories(res);\r\n            if (res.length) {\r\n                setCurCategory(res[0].name);\r\n            }\r\n        })\r\n    }, []);\r\n\r\n    return <div>\r\n        \r\n        <Form>\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n                <Form.Label>doCC</Form.Label>\r\n                <Form.Check checked={!!doCC} type=\"checkbox\" onClick={() => {\r\n                    setDoCC(!doCC);\r\n                }} label=\"doCC\" />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n                <Form.Label>Payee</Form.Label>\r\n                <Form.Control as=\"input\" placeholder=\"Payee\" value={payee} onChange={e => {\r\n                    setPayee(e.target.value)\r\n                }} />\r\n                <Form.Text className=\"text-muted\">\r\n                    User to be paid\r\n                </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"Amount\">\r\n                <Form.Label>Amount</Form.Label>\r\n                <Form.Control type=\"number\" placeholder=\"Amount\" value={amount} onChange={e => {\r\n                    setAmount(e.target.value);\r\n                }} />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formBasicCheckbox\">                \r\n            </Form.Group>\r\n            <DropdownButton title={curCategory} >\r\n                {\r\n                    categories.map((l, ind) => {\r\n                        return <Dropdown.Item key={ind} onSelect={() => setCurCategory(l.name)}>{l.name}</Dropdown.Item>\r\n                    })\r\n                }\r\n            </DropdownButton>            \r\n            {\r\n                files.map(f => {\r\n                    return <Row><Col>{f.name}</Col><Col>{f.buffer.length}</Col><Col><Button onClick={\r\n                        () => {\r\n                            setFiles(files.filter(fl=>fl.name !== f.name))\r\n                        }\r\n                    }>Delete</Button></Col></Row>\r\n                })\r\n            }\r\n            <input type=\"file\" name=\"newFile\" onChange={e => {                \r\n                const name = e.target.value;\r\n                if (files.filter(f => f.name === name).length) return;\r\n                const reader = new FileReader();\r\n                reader.onload = function () {\r\n                    const buffer = reader.result;                    \r\n                    setFiles(files.concat({\r\n                        name: e.target.value,\r\n                        buffer,\r\n                    }))\r\n                };\r\n                reader.readAsDataURL(e.target.files[0]);\r\n            }}/>\r\n            <Button variant=\"primary\" disabled={submitting} onClick={() => {\r\n                setSubmitting(true);\r\n                emailExpense({ amount, payee, categary: curCategory, attachements: files, doCC }).then(res => {\r\n                    console.log(res);\r\n                    setSubmitting(false);\r\n                })\r\n            }}>\r\n                Submit\r\n            </Button>\r\n        </Form>\r\n    </div>\r\n}","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Expenses} from './components/Expenses'\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">        \r\n      </header>\r\n      <Expenses></Expenses>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}